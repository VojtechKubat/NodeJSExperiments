{"version":3,"sources":["../server/index.js"],"names":["app","underconstruction","registerPartials","__dirname","set","use","req","res","next","now","Date","toString","log","method","url","appendFile","error","console","render","static","registerHelper","getFullYear","text","toUpperCase","get","title","send","welcomeText","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AACA;;AAEA,IAAIA,MAAM,wBAAV;AACA,IAAIC,oBAAoB,IAAxB;;AAEA,cAAIC,gBAAJ,CAAqBC,YAAU,iBAA/B;;AAEA;AACAH,IAAII,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACA;AACAJ,IAAII,GAAJ,CAAQ,OAAR,EAAiBD,YAAU,QAA3B;;AAEA;AACAH,IAAIK,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB,QAAIC,MAAM,IAAIC,IAAJ,GAAWC,QAAX,EAAV;AACA,QAAIC,aAAWH,GAAX,WAAoBH,IAAIO,MAAxB,WAAoCP,IAAIQ,GAA5C;;AAEA,iBAAGC,UAAH,CAAc,YAAd,EAA4BH,MAAM,IAAlC,EAAwC,UAACI,KAAD,EAAW;AAC/C,YAAIA,KAAJ,EAAW;AACPC,oBAAQL,GAAR,CAAY,6BAAZ;AACH;AACJ,KAJD;AAKAK,YAAQL,GAAR,CAAYA,GAAZ;AACAJ;AACH,CAXD;;AAaAR,IAAIK,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB,QAAIP,iBAAJ,EAAuB;AACnBM,YAAIW,MAAJ,CAAW,mBAAX;AACH,KAFD,MAEO;AACHV;AACH;AACJ,CAND;;AAQA;AACAR,IAAIK,GAAJ,CAAQ,kBAAQc,MAAR,CAAehB,YAAU,SAAzB,CAAR;;AAEA,cAAIiB,cAAJ,CAAmB,aAAnB,EAAkC,YAAM;AACpC,WAAO,IAAIV,IAAJ,GAAWW,WAAX,EAAP,CADoC,CACQ;AAC5C;AACH,CAHD;;AAKA,cAAID,cAAJ,CAAmB,UAAnB,EAA+B,UAACE,IAAD,EAAU;AACrC,WAAOA,KAAKC,WAAL,EAAP,CADqC,CACO;AAC/C,CAFD;;AAIAvB,IAAIwB,GAAJ,CAAQ,QAAR,EAAkB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC5B;AACA;;AAEA;AACAA,QAAIW,MAAJ,CAAW,WAAX,EAAwB;AACpBO,eAAQ;AACR;AAFoB,KAAxB;AAIH,CATD;;AAWAzB,IAAIwB,GAAJ,CAAQ,MAAR,EAAgB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC1B;AACAA,QAAImB,IAAJ,CAAS;AACLV,eAAO;AADF,KAAT;AAGH,CALD;;AAOAhB,IAAIwB,GAAJ,CAAQ,GAAR,EAAa,UAAClB,GAAD,EAAMC,GAAN,EAAc;AACvB;;AAEAA,QAAIW,MAAJ,CAAW,UAAX,EAAuB;AACnBS,qBAAc,0BADK;AAEnBF,eAAQ;AACR;AAHmB,KAAvB;AAKH,CARD;;AAUAzB,IAAI4B,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACnBX,YAAQL,GAAR,CAAY,2BAAZ;AACH,CAFD","file":"index.js","sourcesContent":["import express from 'express';\nimport hbs from 'hbs';\nimport fs from 'fs';\n// import  \n\nvar app = express();\nvar underconstruction = true;\n\nhbs.registerPartials(__dirname+'/views/partials');\n\n// setting hbs (handlebars) as template engine - it will look for 'views' subfolder\napp.set('view engine', 'hbs');\n// redefines view property, because we're using babel and exporting js files into dist folder\napp.set('views', __dirname+'/views');      \n\n// custom middleware\napp.use((req, res, next) => {\n    var now = new Date().toString();\n    var log = `> ${now} : ${req.method} - ${req.url}`;\n\n    fs.appendFile('server.log', log + '\\n', (error) => {\n        if (error) {\n            console.log('Cannot append to server.log')\n        }\n    });\n    console.log(log);\n    next();\n});\n\napp.use((req, res, next) => {\n    if (underconstruction) {\n        res.render('underconstruction');\n    } else {\n        next();\n    }\n});\n\n// 'static' is a build-in express middleware; it serves all the files within the defined forlders on their respective routes\napp.use(express.static(__dirname+'/public'));\n\nhbs.registerHelper('currentYear', () => {\n    return new Date().getFullYear();            // this is used for partials\n    // return 3000;\n});\n\nhbs.registerHelper('screamIt', (text) => {\n    return text.toUpperCase();                  // helper, which takes a parameter - see home.hbs\n});\n\napp.get('/about', (req, res) => {\n    // console.log('Request for /about');\n    // res.send('<h1>About page</h1>');\n\n    // this uses handlebars\n    res.render('about.hbs', {\n        title : 'A About page'\n        // currentYear: new Date().getFullYear()            // registerHelper makes this property unnecessary, since it is displayed on a partial\n    });        \n});\n\napp.get('/bad', (req, res) => {\n    // console.log('Request for /bad');\n    res.send({\n        error: 'Error - page does not exist.'\n    });\n})\n\napp.get('/', (req, res) => {\n    // console.log('Request for /');\n    \n    res.render('home.hbs', {\n        welcomeText : 'Welcome to the home page',\n        title : 'A Home'\n        // currentYear: new Date().getFullYear()\n    });\n});\n\napp.listen(3000, () => {\n    console.log('Server is up on port 3000');\n});"]}