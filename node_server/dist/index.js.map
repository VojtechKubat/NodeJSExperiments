{"version":3,"sources":["../server/index.js"],"names":["isMaster","cpuCount","require","cpus","length","i","fork","express","hbs","fs","app","underconstruction","registerPartials","__dirname","set","use","req","res","next","now","Date","toString","log","method","url","appendFile","error","console","render","static","registerHelper","getFullYear","text","toUpperCase","get","title","send","welcomeText","listen","on","worker","id"],"mappings":";;AACA;;;;AACA;;;;AAEA,IAAI,kBAAQA,QAAZ,EAAsB;;AAElB;AACA,QAAIC,WAAWC,QAAQ,IAAR,EAAcC,IAAd,GAAqBC,MAApC;;AAEA;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,KAAK,CAA5B,EAA+B;AAC3B,0BAAQC,IAAR;AACH;AAEJ,CAVD,MAUO;AACH;AACA;AACA;AACA,QAAIC,UAAUL,QAAQ,SAAR,CAAd;AACA,QAAIM,MAAMN,QAAQ,KAAR,CAAV;AACA,QAAIO,KAAKP,QAAQ,IAAR,CAAT;;AAGA,QAAIQ,MAAMH,SAAV;AACA,QAAII,oBAAoB,IAAxB;;AAEAH,QAAII,gBAAJ,CAAqBC,YAAU,iBAA/B;;AAEA;AACAH,QAAII,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACA;AACAJ,QAAII,GAAJ,CAAQ,OAAR,EAAiBD,YAAU,QAA3B;;AAEA;;AAEA;AACAH,QAAIK,GAAJ,CAAQ,UAACC,GAAD,EAAeC,GAAf,EAAoBC,IAApB,EAA6B;AACjC,YAAIC,MAAM,IAAIC,IAAJ,GAAWC,QAAX,EAAV;AACA,YAAIC,aAAWH,GAAX,WAAoBH,IAAIO,MAAxB,WAAoCP,IAAIQ,GAA5C;;AAEAf,WAAGgB,UAAH,CAAc,YAAd,EAA4BH,MAAM,IAAlC,EAAwC,UAACI,KAAD,EAAW;AAC/C,gBAAIA,KAAJ,EAAW;AACPC,wBAAQL,GAAR,CAAY,6BAAZ;AACH;AACJ,SAJD;AAKAK,gBAAQL,GAAR,CAAYA,GAAZ;AACAJ;AACH,KAXD;;AAaAR,QAAIK,GAAJ,CAAQ,UAACC,GAAD,EAAeC,GAAf,EAAoBC,IAApB,EAA6B;AACjC,YAAIP,iBAAJ,EAAuB;AACnBM,gBAAIW,MAAJ,CAAW,mBAAX;AACH,SAFD,MAEO;AACHV;AACH;AACJ,KAND;;AAQA;AACAR,QAAIK,GAAJ,CAAQR,QAAQsB,MAAR,CAAehB,YAAU,SAAzB,CAAR;;AAEAL,QAAIsB,cAAJ,CAAmB,aAAnB,EAAkC,YAAM;AACpC,eAAO,IAAIV,IAAJ,GAAWW,WAAX,EAAP,CADoC,CACQ;AAC5C;AACH,KAHD;;AAKAvB,QAAIsB,cAAJ,CAAmB,UAAnB,EAA+B,UAACE,IAAD,EAAU;AACrC,eAAOA,KAAKC,WAAL,EAAP,CADqC,CACO;AAC/C,KAFD;;AAIAvB,QAAIwB,GAAJ,CAAQ,QAAR,EAAkB,UAAClB,GAAD,EAAeC,GAAf,EAAuB;AACrC;AACA;;AAEA;AACAA,YAAIW,MAAJ,CAAW,WAAX,EAAwB;AACpBO,mBAAQ;AACR;AAFoB,SAAxB;AAIH,KATD;;AAWAzB,QAAIwB,GAAJ,CAAQ,MAAR,EAAgB,UAAClB,GAAD,EAAeC,GAAf,EAAuB;AACnC;AACAA,YAAImB,IAAJ,CAAS;AACLV,mBAAO;AADF,SAAT;AAGH,KALD;;AAOAhB,QAAIwB,GAAJ,CAAQ,GAAR,EAAa,UAAClB,GAAD,EAAeC,GAAf,EAAuB;AAChC;;AAEAA,YAAIW,MAAJ,CAAW,UAAX,EAAuB;AACnBS,yBAAc,0BADK;AAEnBF,mBAAQ;AACR;AAHmB,SAAvB;AAKH,KARD;;AAUAzB,QAAI4B,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACnBX,gBAAQL,GAAR,CAAY,2BAAZ;AACH,KAFD;AAGH;;AAED,kBAAQiB,EAAR,CAAW,MAAX,EAAmB,UAAUC,MAAV,EAAkB;;AAEjC;AACA;AACAb,YAAQL,GAAR,CAAY,mBAAZ,EAAiCkB,OAAOC,EAAxC;AACA,sBAAQnC,IAAR;AAEH,CAPD","file":"index.js","sourcesContent":["/* @flow */\nimport cluster from 'cluster';\nimport { request } from 'https';\n\nif (cluster.isMaster) {\n\n    // Count the machine's CPUs\n    var cpuCount = require('os').cpus().length;\n\n    // Create a worker for each CPU\n    for (var i = 0; i < 1; i += 1) {\n        cluster.fork();\n    }\n\n} else {\n    // import express from 'express';\n    // import hbs from 'hbs';\n    // import fs from 'fs';\n    var express = require('express');\n    var hbs = require('hbs');\n    var fs = require('fs');\n    \n\n    var app = express();\n    var underconstruction = true;\n\n    hbs.registerPartials(__dirname+'/views/partials');\n\n    // setting hbs (handlebars) as template engine - it will look for 'views' subfolder\n    app.set('view engine', 'hbs');\n    // redefines view property, because we're using babel and exporting js files into dist folder\n    app.set('views', __dirname+'/views');      \n\n    // app.use()\n\n    // custom middleware\n    app.use((req: Request, res, next) => {\n        var now = new Date().toString();\n        var log = `> ${now} : ${req.method} - ${req.url}`;\n\n        fs.appendFile('server.log', log + '\\n', (error) => {\n            if (error) {\n                console.log('Cannot append to server.log')\n            }\n        });\n        console.log(log);\n        next();\n    });\n\n    app.use((req: Request, res, next) => {\n        if (underconstruction) {\n            res.render('underconstruction');\n        } else {\n            next();\n        }\n    });\n\n    // 'static' is a build-in express middleware; it serves all the files within the defined forlders on their respective routes\n    app.use(express.static(__dirname+'/public'));\n\n    hbs.registerHelper('currentYear', () => {\n        return new Date().getFullYear();            // this is used for partials\n        // return 3000;\n    });\n\n    hbs.registerHelper('screamIt', (text) => {\n        return text.toUpperCase();                  // helper, which takes a parameter - see home.hbs\n    });\n\n    app.get('/about', (req: Request, res) => {\n        // console.log('Request for /about');\n        // res.send('<h1>About page</h1>');\n\n        // this uses handlebars\n        res.render('about.hbs', {\n            title : 'A About page'\n            // currentYear: new Date().getFullYear()            // registerHelper makes this property unnecessary, since it is displayed on a partial\n        });        \n    });\n\n    app.get('/bad', (req: Request, res) => {\n        // console.log('Request for /bad');\n        res.send({\n            error: 'Error - page does not exist.'\n        });\n    })\n\n    app.get('/', (req: Request, res) => {\n        // console.log('Request for /');\n        \n        res.render('home.hbs', {\n            welcomeText : 'Welcome to the home page',\n            title : 'A Home'\n            // currentYear: new Date().getFullYear()\n        });\n    });\n\n    app.listen(3000, () => {\n        console.log('Server is up on port 3000');\n    });\n}\n\ncluster.on('exit', function (worker) {\n\n    // Replace the dead worker,\n    // we're not sentimental\n    console.log('Worker %d died :(', worker.id);\n    cluster.fork();\n\n});"]}